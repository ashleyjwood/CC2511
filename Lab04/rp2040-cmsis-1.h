// generated by python3 svd.py
#pragma once
typedef __UINT32_TYPE__ uint32_t;
#define REG(addr) *(volatile uint32_t*)(addr)
#define __IO volatile



typedef struct
{
	__IO uint32_t CTRL;	// off 0x0000
	__IO uint32_t FLUSH;	// off 0x0004
	__IO uint32_t STAT;	// off 0x0008
	__IO uint32_t CTR_HIT;	// off 0x000c
	__IO uint32_t CTR_ACC;	// off 0x0010
	__IO uint32_t STREAM_ADDR;	// off 0x0014
	__IO uint32_t STREAM_CTR;	// off 0x0018
	__IO uint32_t STREAM_FIFO;	// off 0x001c
} XIP_CTRL_TypeDef;
#define XIP_CTRL_BASE 0x14000000
#define XIP_CTRL ((XIP_CTRL_TypeDef *) XIP_CTRL_BASE)

typedef struct
{
	__IO uint32_t CTRLR0;	// off 0x0000
	__IO uint32_t CTRLR1;	// off 0x0004
	__IO uint32_t SSIENR;	// off 0x0008
	__IO uint32_t MWCR;	// off 0x000c
	__IO uint32_t SER;	// off 0x0010
	__IO uint32_t BAUDR;	// off 0x0014
	__IO uint32_t TXFTLR;	// off 0x0018
	__IO uint32_t RXFTLR;	// off 0x001c
	__IO uint32_t TXFLR;	// off 0x0020
	__IO uint32_t RXFLR;	// off 0x0024
	__IO uint32_t SR;	// off 0x0028
	__IO uint32_t IMR;	// off 0x002c
	__IO uint32_t ISR;	// off 0x0030
	__IO uint32_t RISR;	// off 0x0034
	__IO uint32_t TXOICR;	// off 0x0038
	__IO uint32_t RXOICR;	// off 0x003c
	__IO uint32_t RXUICR;	// off 0x0040
	__IO uint32_t MSTICR;	// off 0x0044
	__IO uint32_t ICR;	// off 0x0048
	__IO uint32_t DMACR;	// off 0x004c
	__IO uint32_t DMATDLR;	// off 0x0050
	__IO uint32_t DMARDLR;	// off 0x0054
	__IO uint32_t IDR;	// off 0x0058
	__IO uint32_t SSI_VERSION_ID;	// off 0x005c
	__IO uint32_t DR0;	// off 0x0060
	__IO uint32_t _pad0[35]; 
	__IO uint32_t RX_SAMPLE_DLY;	// off 0x00f0
	__IO uint32_t SPI_CTRLR0;	// off 0x00f4
	__IO uint32_t TXD_DRIVE_EDGE;	// off 0x00f8
} XIP_SSI_TypeDef;
#define XIP_SSI_BASE 0x18000000
#define XIP_SSI ((XIP_SSI_TypeDef *) XIP_SSI_BASE)

typedef struct
{
	__IO uint32_t CHIP_ID;	// off 0x0000
	__IO uint32_t PLATFORM;	// off 0x0004
	__IO uint32_t _pad0[14]; 
	__IO uint32_t GITREF_RP2040;	// off 0x0040
} SYSINFO_TypeDef;
#define SYSINFO_BASE 0x40000000
#define SYSINFO ((SYSINFO_TypeDef *) SYSINFO_BASE)

typedef struct
{
	__IO uint32_t PROC0_NMI_MASK;	// off 0x0000
	__IO uint32_t PROC1_NMI_MASK;	// off 0x0004
	__IO uint32_t PROC_CONFIG;	// off 0x0008
	__IO uint32_t PROC_IN_SYNC_BYPASS;	// off 0x000c
	__IO uint32_t PROC_IN_SYNC_BYPASS_HI;	// off 0x0010
	__IO uint32_t DBGFORCE;	// off 0x0014
	__IO uint32_t MEMPOWERDOWN;	// off 0x0018
} SYSCFG_TypeDef;
#define SYSCFG_BASE 0x40004000
#define SYSCFG ((SYSCFG_TypeDef *) SYSCFG_BASE)

typedef struct
{
	__IO uint32_t CLK_GPOUT0_CTRL;	// off 0x0000
	__IO uint32_t CLK_GPOUT0_DIV;	// off 0x0004
	__IO uint32_t CLK_GPOUT0_SELECTED;	// off 0x0008
	__IO uint32_t CLK_GPOUT1_CTRL;	// off 0x000c
	__IO uint32_t CLK_GPOUT1_DIV;	// off 0x0010
	__IO uint32_t CLK_GPOUT1_SELECTED;	// off 0x0014
	__IO uint32_t CLK_GPOUT2_CTRL;	// off 0x0018
	__IO uint32_t CLK_GPOUT2_DIV;	// off 0x001c
	__IO uint32_t CLK_GPOUT2_SELECTED;	// off 0x0020
	__IO uint32_t CLK_GPOUT3_CTRL;	// off 0x0024
	__IO uint32_t CLK_GPOUT3_DIV;	// off 0x0028
	__IO uint32_t CLK_GPOUT3_SELECTED;	// off 0x002c
	__IO uint32_t CLK_REF_CTRL;	// off 0x0030
	__IO uint32_t CLK_REF_DIV;	// off 0x0034
	__IO uint32_t CLK_REF_SELECTED;	// off 0x0038
	__IO uint32_t CLK_SYS_CTRL;	// off 0x003c
	__IO uint32_t CLK_SYS_DIV;	// off 0x0040
	__IO uint32_t CLK_SYS_SELECTED;	// off 0x0044
	__IO uint32_t CLK_PERI_CTRL;	// off 0x0048
	__IO uint32_t _pad0; 
	__IO uint32_t CLK_PERI_SELECTED;	// off 0x0050
	__IO uint32_t CLK_USB_CTRL;	// off 0x0054
	__IO uint32_t CLK_USB_DIV;	// off 0x0058
	__IO uint32_t CLK_USB_SELECTED;	// off 0x005c
	__IO uint32_t CLK_ADC_CTRL;	// off 0x0060
	__IO uint32_t CLK_ADC_DIV;	// off 0x0064
	__IO uint32_t CLK_ADC_SELECTED;	// off 0x0068
	__IO uint32_t CLK_RTC_CTRL;	// off 0x006c
	__IO uint32_t CLK_RTC_DIV;	// off 0x0070
	__IO uint32_t CLK_RTC_SELECTED;	// off 0x0074
	__IO uint32_t CLK_SYS_RESUS_CTRL;	// off 0x0078
	__IO uint32_t CLK_SYS_RESUS_STATUS;	// off 0x007c
	__IO uint32_t FC0_REF_KHZ;	// off 0x0080
	__IO uint32_t FC0_MIN_KHZ;	// off 0x0084
	__IO uint32_t FC0_MAX_KHZ;	// off 0x0088
	__IO uint32_t FC0_DELAY;	// off 0x008c
	__IO uint32_t FC0_INTERVAL;	// off 0x0090
	__IO uint32_t FC0_SRC;	// off 0x0094
	__IO uint32_t FC0_STATUS;	// off 0x0098
	__IO uint32_t FC0_RESULT;	// off 0x009c
	__IO uint32_t WAKE_EN0;	// off 0x00a0
	__IO uint32_t WAKE_EN1;	// off 0x00a4
	__IO uint32_t SLEEP_EN0;	// off 0x00a8
	__IO uint32_t SLEEP_EN1;	// off 0x00ac
	__IO uint32_t ENABLED0;	// off 0x00b0
	__IO uint32_t ENABLED1;	// off 0x00b4
	__IO uint32_t INTR;	// off 0x00b8
	__IO uint32_t INTE;	// off 0x00bc
	__IO uint32_t INTF;	// off 0x00c0
	__IO uint32_t INTS;	// off 0x00c4
} CLOCKS_TypeDef;
#define CLOCKS_BASE 0x40008000
#define CLOCKS ((CLOCKS_TypeDef *) CLOCKS_BASE)

typedef struct
{
	__IO uint32_t RESET;	// off 0x0000
	__IO uint32_t WDSEL;	// off 0x0004
	__IO uint32_t RESET_DONE;	// off 0x0008
} RESETS_TypeDef;
#define RESETS_BASE 0x4000c000
#define RESETS ((RESETS_TypeDef *) RESETS_BASE)

typedef struct
{
	__IO uint32_t FRCE_ON;	// off 0x0000
	__IO uint32_t FRCE_OFF;	// off 0x0004
	__IO uint32_t WDSEL;	// off 0x0008
	__IO uint32_t DONE;	// off 0x000c
} PSM_TypeDef;
#define PSM_BASE 0x40010000
#define PSM ((PSM_TypeDef *) PSM_BASE)

typedef struct
{
	__IO uint32_t GPIO0_STATUS;	// off 0x0000
	__IO uint32_t GPIO0_CTRL;	// off 0x0004
	__IO uint32_t GPIO1_STATUS;	// off 0x0008
	__IO uint32_t GPIO1_CTRL;	// off 0x000c
	__IO uint32_t GPIO2_STATUS;	// off 0x0010
	__IO uint32_t GPIO2_CTRL;	// off 0x0014
	__IO uint32_t GPIO3_STATUS;	// off 0x0018
	__IO uint32_t GPIO3_CTRL;	// off 0x001c
	__IO uint32_t GPIO4_STATUS;	// off 0x0020
	__IO uint32_t GPIO4_CTRL;	// off 0x0024
	__IO uint32_t GPIO5_STATUS;	// off 0x0028
	__IO uint32_t GPIO5_CTRL;	// off 0x002c
	__IO uint32_t GPIO6_STATUS;	// off 0x0030
	__IO uint32_t GPIO6_CTRL;	// off 0x0034
	__IO uint32_t GPIO7_STATUS;	// off 0x0038
	__IO uint32_t GPIO7_CTRL;	// off 0x003c
	__IO uint32_t GPIO8_STATUS;	// off 0x0040
	__IO uint32_t GPIO8_CTRL;	// off 0x0044
	__IO uint32_t GPIO9_STATUS;	// off 0x0048
	__IO uint32_t GPIO9_CTRL;	// off 0x004c
	__IO uint32_t GPIO10_STATUS;	// off 0x0050
	__IO uint32_t GPIO10_CTRL;	// off 0x0054
	__IO uint32_t GPIO11_STATUS;	// off 0x0058
	__IO uint32_t GPIO11_CTRL;	// off 0x005c
	__IO uint32_t GPIO12_STATUS;	// off 0x0060
	__IO uint32_t GPIO12_CTRL;	// off 0x0064
	__IO uint32_t GPIO13_STATUS;	// off 0x0068
	__IO uint32_t GPIO13_CTRL;	// off 0x006c
	__IO uint32_t GPIO14_STATUS;	// off 0x0070
	__IO uint32_t GPIO14_CTRL;	// off 0x0074
	__IO uint32_t GPIO15_STATUS;	// off 0x0078
	__IO uint32_t GPIO15_CTRL;	// off 0x007c
	__IO uint32_t GPIO16_STATUS;	// off 0x0080
	__IO uint32_t GPIO16_CTRL;	// off 0x0084
	__IO uint32_t GPIO17_STATUS;	// off 0x0088
	__IO uint32_t GPIO17_CTRL;	// off 0x008c
	__IO uint32_t GPIO18_STATUS;	// off 0x0090
	__IO uint32_t GPIO18_CTRL;	// off 0x0094
	__IO uint32_t GPIO19_STATUS;	// off 0x0098
	__IO uint32_t GPIO19_CTRL;	// off 0x009c
	__IO uint32_t GPIO20_STATUS;	// off 0x00a0
	__IO uint32_t GPIO20_CTRL;	// off 0x00a4
	__IO uint32_t GPIO21_STATUS;	// off 0x00a8
	__IO uint32_t GPIO21_CTRL;	// off 0x00ac
	__IO uint32_t GPIO22_STATUS;	// off 0x00b0
	__IO uint32_t GPIO22_CTRL;	// off 0x00b4
	__IO uint32_t GPIO23_STATUS;	// off 0x00b8
	__IO uint32_t GPIO23_CTRL;	// off 0x00bc
	__IO uint32_t GPIO24_STATUS;	// off 0x00c0
	__IO uint32_t GPIO24_CTRL;	// off 0x00c4
	__IO uint32_t GPIO25_STATUS;	// off 0x00c8
	__IO uint32_t GPIO25_CTRL;	// off 0x00cc
	__IO uint32_t GPIO26_STATUS;	// off 0x00d0
	__IO uint32_t GPIO26_CTRL;	// off 0x00d4
	__IO uint32_t GPIO27_STATUS;	// off 0x00d8
	__IO uint32_t GPIO27_CTRL;	// off 0x00dc
	__IO uint32_t GPIO28_STATUS;	// off 0x00e0
	__IO uint32_t GPIO28_CTRL;	// off 0x00e4
	__IO uint32_t GPIO29_STATUS;	// off 0x00e8
	__IO uint32_t GPIO29_CTRL;	// off 0x00ec
	__IO uint32_t INTR0;	// off 0x00f0
	__IO uint32_t INTR1;	// off 0x00f4
	__IO uint32_t INTR2;	// off 0x00f8
	__IO uint32_t INTR3;	// off 0x00fc
	__IO uint32_t PROC0_INTE0;	// off 0x0100
	__IO uint32_t PROC0_INTE1;	// off 0x0104
	__IO uint32_t PROC0_INTE2;	// off 0x0108
	__IO uint32_t PROC0_INTE3;	// off 0x010c
	__IO uint32_t PROC0_INTF0;	// off 0x0110
	__IO uint32_t PROC0_INTF1;	// off 0x0114
	__IO uint32_t PROC0_INTF2;	// off 0x0118
	__IO uint32_t PROC0_INTF3;	// off 0x011c
	__IO uint32_t PROC0_INTS0;	// off 0x0120
	__IO uint32_t PROC0_INTS1;	// off 0x0124
	__IO uint32_t PROC0_INTS2;	// off 0x0128
	__IO uint32_t PROC0_INTS3;	// off 0x012c
	__IO uint32_t PROC1_INTE0;	// off 0x0130
	__IO uint32_t PROC1_INTE1;	// off 0x0134
	__IO uint32_t PROC1_INTE2;	// off 0x0138
	__IO uint32_t PROC1_INTE3;	// off 0x013c
	__IO uint32_t PROC1_INTF0;	// off 0x0140
	__IO uint32_t PROC1_INTF1;	// off 0x0144
	__IO uint32_t PROC1_INTF2;	// off 0x0148
	__IO uint32_t PROC1_INTF3;	// off 0x014c
	__IO uint32_t PROC1_INTS0;	// off 0x0150
	__IO uint32_t PROC1_INTS1;	// off 0x0154
	__IO uint32_t PROC1_INTS2;	// off 0x0158
	__IO uint32_t PROC1_INTS3;	// off 0x015c
	__IO uint32_t DORMANT_WAKE_INTE0;	// off 0x0160
	__IO uint32_t DORMANT_WAKE_INTE1;	// off 0x0164
	__IO uint32_t DORMANT_WAKE_INTE2;	// off 0x0168
	__IO uint32_t DORMANT_WAKE_INTE3;	// off 0x016c
	__IO uint32_t DORMANT_WAKE_INTF0;	// off 0x0170
	__IO uint32_t DORMANT_WAKE_INTF1;	// off 0x0174
	__IO uint32_t DORMANT_WAKE_INTF2;	// off 0x0178
	__IO uint32_t DORMANT_WAKE_INTF3;	// off 0x017c
	__IO uint32_t DORMANT_WAKE_INTS0;	// off 0x0180
	__IO uint32_t DORMANT_WAKE_INTS1;	// off 0x0184
	__IO uint32_t DORMANT_WAKE_INTS2;	// off 0x0188
	__IO uint32_t DORMANT_WAKE_INTS3;	// off 0x018c
} IO_BANK0_TypeDef;
#define IO_BANK0_BASE 0x40014000
#define IO_BANK0 ((IO_BANK0_TypeDef *) IO_BANK0_BASE)

typedef struct
{
	__IO uint32_t GPIO_QSPI_SCLK_STATUS;	// off 0x0000
	__IO uint32_t GPIO_QSPI_SCLK_CTRL;	// off 0x0004
	__IO uint32_t GPIO_QSPI_SS_STATUS;	// off 0x0008
	__IO uint32_t GPIO_QSPI_SS_CTRL;	// off 0x000c
	__IO uint32_t GPIO_QSPI_SD0_STATUS;	// off 0x0010
	__IO uint32_t GPIO_QSPI_SD0_CTRL;	// off 0x0014
	__IO uint32_t GPIO_QSPI_SD1_STATUS;	// off 0x0018
	__IO uint32_t GPIO_QSPI_SD1_CTRL;	// off 0x001c
	__IO uint32_t GPIO_QSPI_SD2_STATUS;	// off 0x0020
	__IO uint32_t GPIO_QSPI_SD2_CTRL;	// off 0x0024
	__IO uint32_t GPIO_QSPI_SD3_STATUS;	// off 0x0028
	__IO uint32_t GPIO_QSPI_SD3_CTRL;	// off 0x002c
	__IO uint32_t INTR;	// off 0x0030
	__IO uint32_t PROC0_INTE;	// off 0x0034
	__IO uint32_t PROC0_INTF;	// off 0x0038
	__IO uint32_t PROC0_INTS;	// off 0x003c
	__IO uint32_t PROC1_INTE;	// off 0x0040
	__IO uint32_t PROC1_INTF;	// off 0x0044
	__IO uint32_t PROC1_INTS;	// off 0x0048
	__IO uint32_t DORMANT_WAKE_INTE;	// off 0x004c
	__IO uint32_t DORMANT_WAKE_INTF;	// off 0x0050
	__IO uint32_t DORMANT_WAKE_INTS;	// off 0x0054
} IO_QSPI_TypeDef;
#define IO_QSPI_BASE 0x40018000
#define IO_QSPI ((IO_QSPI_TypeDef *) IO_QSPI_BASE)

typedef struct
{
	__IO uint32_t VOLTAGE_SELECT;	// off 0x0000
	__IO uint32_t GPIO0;	// off 0x0004
	__IO uint32_t GPIO1;	// off 0x0008
	__IO uint32_t GPIO2;	// off 0x000c
	__IO uint32_t GPIO3;	// off 0x0010
	__IO uint32_t GPIO4;	// off 0x0014
	__IO uint32_t GPIO5;	// off 0x0018
	__IO uint32_t GPIO6;	// off 0x001c
	__IO uint32_t GPIO7;	// off 0x0020
	__IO uint32_t GPIO8;	// off 0x0024
	__IO uint32_t GPIO9;	// off 0x0028
	__IO uint32_t GPIO10;	// off 0x002c
	__IO uint32_t GPIO11;	// off 0x0030
	__IO uint32_t GPIO12;	// off 0x0034
	__IO uint32_t GPIO13;	// off 0x0038
	__IO uint32_t GPIO14;	// off 0x003c
	__IO uint32_t GPIO15;	// off 0x0040
	__IO uint32_t GPIO16;	// off 0x0044
	__IO uint32_t GPIO17;	// off 0x0048
	__IO uint32_t GPIO18;	// off 0x004c
	__IO uint32_t GPIO19;	// off 0x0050
	__IO uint32_t GPIO20;	// off 0x0054
	__IO uint32_t GPIO21;	// off 0x0058
	__IO uint32_t GPIO22;	// off 0x005c
	__IO uint32_t GPIO23;	// off 0x0060
	__IO uint32_t GPIO24;	// off 0x0064
	__IO uint32_t GPIO25;	// off 0x0068
	__IO uint32_t GPIO26;	// off 0x006c
	__IO uint32_t GPIO27;	// off 0x0070
	__IO uint32_t GPIO28;	// off 0x0074
	__IO uint32_t GPIO29;	// off 0x0078
	__IO uint32_t SWCLK;	// off 0x007c
	__IO uint32_t SWD;	// off 0x0080
} PADS_BANK0_TypeDef;
#define PADS_BANK0_BASE 0x4001c000
#define PADS_BANK0 ((PADS_BANK0_TypeDef *) PADS_BANK0_BASE)

typedef struct
{
	__IO uint32_t VOLTAGE_SELECT;	// off 0x0000
	__IO uint32_t GPIO_QSPI_SCLK;	// off 0x0004
	__IO uint32_t GPIO_QSPI_SD0;	// off 0x0008
	__IO uint32_t GPIO_QSPI_SD1;	// off 0x000c
	__IO uint32_t GPIO_QSPI_SD2;	// off 0x0010
	__IO uint32_t GPIO_QSPI_SD3;	// off 0x0014
	__IO uint32_t GPIO_QSPI_SS;	// off 0x0018
} PADS_QSPI_TypeDef;
#define PADS_QSPI_BASE 0x40020000
#define PADS_QSPI ((PADS_QSPI_TypeDef *) PADS_QSPI_BASE)

typedef struct
{
	__IO uint32_t CTRL;	// off 0x0000
	__IO uint32_t STATUS;	// off 0x0004
	__IO uint32_t DORMANT;	// off 0x0008
	__IO uint32_t STARTUP;	// off 0x000c
	__IO uint32_t _pad0[3]; 
	__IO uint32_t COUNT;	// off 0x001c
} XOSC_TypeDef;
#define XOSC_BASE 0x40024000
#define XOSC ((XOSC_TypeDef *) XOSC_BASE)

typedef struct
{
	__IO uint32_t CS;	// off 0x0000
	__IO uint32_t PWR;	// off 0x0004
	__IO uint32_t FBDIV_INT;	// off 0x0008
	__IO uint32_t PRIM;	// off 0x000c
} PLL_SYS_TypeDef;
#define PLL_SYS_BASE 0x40028000
#define PLL_SYS ((PLL_SYS_TypeDef *) PLL_SYS_BASE)

#define PLL_USB_BASE 0x4002c000
#define PLL_USB ((PLL_USB_TypeDef *) PLL_USB_BASE)

typedef struct
{
	__IO uint32_t BUS_PRIORITY;	// off 0x0000
	__IO uint32_t BUS_PRIORITY_ACK;	// off 0x0004
	__IO uint32_t PERFCTR0;	// off 0x0008
	__IO uint32_t PERFSEL0;	// off 0x000c
	__IO uint32_t PERFCTR1;	// off 0x0010
	__IO uint32_t PERFSEL1;	// off 0x0014
	__IO uint32_t PERFCTR2;	// off 0x0018
	__IO uint32_t PERFSEL2;	// off 0x001c
	__IO uint32_t PERFCTR3;	// off 0x0020
	__IO uint32_t PERFSEL3;	// off 0x0024
} BUSCTRL_TypeDef;
#define BUSCTRL_BASE 0x40030000
#define BUSCTRL ((BUSCTRL_TypeDef *) BUSCTRL_BASE)

typedef struct
{
	__IO uint32_t UARTDR;	// off 0x0000
	__IO uint32_t UARTRSR;	// off 0x0004
	__IO uint32_t _pad0[4]; 
	__IO uint32_t UARTFR;	// off 0x0018
	__IO uint32_t _pad1; 
	__IO uint32_t UARTILPR;	// off 0x0020
	__IO uint32_t UARTIBRD;	// off 0x0024
	__IO uint32_t UARTFBRD;	// off 0x0028
	__IO uint32_t UARTLCR_H;	// off 0x002c
	__IO uint32_t UARTCR;	// off 0x0030
	__IO uint32_t UARTIFLS;	// off 0x0034
	__IO uint32_t UARTIMSC;	// off 0x0038
	__IO uint32_t UARTRIS;	// off 0x003c
	__IO uint32_t UARTMIS;	// off 0x0040
	__IO uint32_t UARTICR;	// off 0x0044
	__IO uint32_t UARTDMACR;	// off 0x0048
	__IO uint32_t _pad2[997]; 
	__IO uint32_t UARTPERIPHID0;	// off 0x0fe0
	__IO uint32_t UARTPERIPHID1;	// off 0x0fe4
	__IO uint32_t UARTPERIPHID2;	// off 0x0fe8
	__IO uint32_t UARTPERIPHID3;	// off 0x0fec
	__IO uint32_t UARTPCELLID0;	// off 0x0ff0
	__IO uint32_t UARTPCELLID1;	// off 0x0ff4
	__IO uint32_t UARTPCELLID2;	// off 0x0ff8
	__IO uint32_t UARTPCELLID3;	// off 0x0ffc
} UART_TypeDef;
#define UART0_BASE 0x40034000
#define UART0 ((UART_TypeDef *) UART0_BASE)

#define UART1_BASE 0x40038000
#define UART1 ((UART_TypeDef *) UART1_BASE)

typedef struct
{
	__IO uint32_t SSPCR0;	// off 0x0000
	__IO uint32_t SSPCR1;	// off 0x0004
	__IO uint32_t SSPDR;	// off 0x0008
	__IO uint32_t SSPSR;	// off 0x000c
	__IO uint32_t SSPCPSR;	// off 0x0010
	__IO uint32_t SSPIMSC;	// off 0x0014
	__IO uint32_t SSPRIS;	// off 0x0018
	__IO uint32_t SSPMIS;	// off 0x001c
	__IO uint32_t SSPICR;	// off 0x0020
	__IO uint32_t SSPDMACR;	// off 0x0024
	__IO uint32_t _pad0[1006]; 
	__IO uint32_t SSPPERIPHID0;	// off 0x0fe0
	__IO uint32_t SSPPERIPHID1;	// off 0x0fe4
	__IO uint32_t SSPPERIPHID2;	// off 0x0fe8
	__IO uint32_t SSPPERIPHID3;	// off 0x0fec
	__IO uint32_t SSPPCELLID0;	// off 0x0ff0
	__IO uint32_t SSPPCELLID1;	// off 0x0ff4
	__IO uint32_t SSPPCELLID2;	// off 0x0ff8
	__IO uint32_t SSPPCELLID3;	// off 0x0ffc
} SPI_TypeDef;
#define SPI0_BASE 0x4003c000
#define SPI0 ((SPI_TypeDef *) SPI0_BASE)

#define SPI1_BASE 0x40040000
#define SPI1 ((SPI_TypeDef *) SPI1_BASE)

typedef struct
{
	__IO uint32_t IC_CON;	// off 0x0000
	__IO uint32_t IC_TAR;	// off 0x0004
	__IO uint32_t IC_SAR;	// off 0x0008
	__IO uint32_t _pad0; 
	__IO uint32_t IC_DATA_CMD;	// off 0x0010
	__IO uint32_t IC_SS_SCL_HCNT;	// off 0x0014
	__IO uint32_t IC_SS_SCL_LCNT;	// off 0x0018
	__IO uint32_t IC_FS_SCL_HCNT;	// off 0x001c
	__IO uint32_t IC_FS_SCL_LCNT;	// off 0x0020
	__IO uint32_t _pad1[2]; 
	__IO uint32_t IC_INTR_STAT;	// off 0x002c
	__IO uint32_t IC_INTR_MASK;	// off 0x0030
	__IO uint32_t IC_RAW_INTR_STAT;	// off 0x0034
	__IO uint32_t IC_RX_TL;	// off 0x0038
	__IO uint32_t IC_TX_TL;	// off 0x003c
	__IO uint32_t IC_CLR_INTR;	// off 0x0040
	__IO uint32_t IC_CLR_RX_UNDER;	// off 0x0044
	__IO uint32_t IC_CLR_RX_OVER;	// off 0x0048
	__IO uint32_t IC_CLR_TX_OVER;	// off 0x004c
	__IO uint32_t IC_CLR_RD_REQ;	// off 0x0050
	__IO uint32_t IC_CLR_TX_ABRT;	// off 0x0054
	__IO uint32_t IC_CLR_RX_DONE;	// off 0x0058
	__IO uint32_t IC_CLR_ACTIVITY;	// off 0x005c
	__IO uint32_t IC_CLR_STOP_DET;	// off 0x0060
	__IO uint32_t IC_CLR_START_DET;	// off 0x0064
	__IO uint32_t IC_CLR_GEN_CALL;	// off 0x0068
	__IO uint32_t IC_ENABLE;	// off 0x006c
	__IO uint32_t IC_STATUS;	// off 0x0070
	__IO uint32_t IC_TXFLR;	// off 0x0074
	__IO uint32_t IC_RXFLR;	// off 0x0078
	__IO uint32_t IC_SDA_HOLD;	// off 0x007c
	__IO uint32_t IC_TX_ABRT_SOURCE;	// off 0x0080
	__IO uint32_t IC_SLV_DATA_NACK_ONLY;	// off 0x0084
	__IO uint32_t IC_DMA_CR;	// off 0x0088
	__IO uint32_t IC_DMA_TDLR;	// off 0x008c
	__IO uint32_t IC_DMA_RDLR;	// off 0x0090
	__IO uint32_t IC_SDA_SETUP;	// off 0x0094
	__IO uint32_t IC_ACK_GENERAL_CALL;	// off 0x0098
	__IO uint32_t IC_ENABLE_STATUS;	// off 0x009c
	__IO uint32_t IC_FS_SPKLEN;	// off 0x00a0
	__IO uint32_t _pad2; 
	__IO uint32_t IC_CLR_RESTART_DET;	// off 0x00a8
	__IO uint32_t _pad3[18]; 
	__IO uint32_t IC_COMP_PARAM_1;	// off 0x00f4
	__IO uint32_t IC_COMP_VERSION;	// off 0x00f8
	__IO uint32_t IC_COMP_TYPE;	// off 0x00fc
} I2C_TypeDef;
#define I2C0_BASE 0x40044000
#define I2C0 ((I2C_TypeDef *) I2C0_BASE)

#define I2C1_BASE 0x40048000
#define I2C1 ((I2C_TypeDef *) I2C1_BASE)

typedef struct
{
	__IO uint32_t CS;	// off 0x0000
	__IO uint32_t RESULT;	// off 0x0004
	__IO uint32_t FCS;	// off 0x0008
	__IO uint32_t FIFO;	// off 0x000c
	__IO uint32_t DIV;	// off 0x0010
	__IO uint32_t INTR;	// off 0x0014
	__IO uint32_t INTE;	// off 0x0018
	__IO uint32_t INTF;	// off 0x001c
	__IO uint32_t INTS;	// off 0x0020
} ADC_TypeDef;
#define ADC_BASE 0x4004c000
#define ADC ((ADC_TypeDef *) ADC_BASE)

typedef struct
{
	__IO uint32_t CH0_CSR;	// off 0x0000
	__IO uint32_t CH0_DIV;	// off 0x0004
	__IO uint32_t CH0_CTR;	// off 0x0008
	__IO uint32_t CH0_CC;	// off 0x000c
	__IO uint32_t CH0_TOP;	// off 0x0010
	__IO uint32_t CH1_CSR;	// off 0x0014
	__IO uint32_t CH1_DIV;	// off 0x0018
	__IO uint32_t CH1_CTR;	// off 0x001c
	__IO uint32_t CH1_CC;	// off 0x0020
	__IO uint32_t CH1_TOP;	// off 0x0024
	__IO uint32_t CH2_CSR;	// off 0x0028
	__IO uint32_t CH2_DIV;	// off 0x002c
	__IO uint32_t CH2_CTR;	// off 0x0030
	__IO uint32_t CH2_CC;	// off 0x0034
	__IO uint32_t CH2_TOP;	// off 0x0038
	__IO uint32_t CH3_CSR;	// off 0x003c
	__IO uint32_t CH3_DIV;	// off 0x0040
	__IO uint32_t CH3_CTR;	// off 0x0044
	__IO uint32_t CH3_CC;	// off 0x0048
	__IO uint32_t CH3_TOP;	// off 0x004c
	__IO uint32_t CH4_CSR;	// off 0x0050
	__IO uint32_t CH4_DIV;	// off 0x0054
	__IO uint32_t CH4_CTR;	// off 0x0058
	__IO uint32_t CH4_CC;	// off 0x005c
	__IO uint32_t CH4_TOP;	// off 0x0060
	__IO uint32_t CH5_CSR;	// off 0x0064
	__IO uint32_t CH5_DIV;	// off 0x0068
	__IO uint32_t CH5_CTR;	// off 0x006c
	__IO uint32_t CH5_CC;	// off 0x0070
	__IO uint32_t CH5_TOP;	// off 0x0074
	__IO uint32_t CH6_CSR;	// off 0x0078
	__IO uint32_t CH6_DIV;	// off 0x007c
	__IO uint32_t CH6_CTR;	// off 0x0080
	__IO uint32_t CH6_CC;	// off 0x0084
	__IO uint32_t CH6_TOP;	// off 0x0088
	__IO uint32_t CH7_CSR;	// off 0x008c
	__IO uint32_t CH7_DIV;	// off 0x0090
	__IO uint32_t CH7_CTR;	// off 0x0094
	__IO uint32_t CH7_CC;	// off 0x0098
	__IO uint32_t CH7_TOP;	// off 0x009c
	__IO uint32_t EN;	// off 0x00a0
	__IO uint32_t INTR;	// off 0x00a4
	__IO uint32_t INTE;	// off 0x00a8
	__IO uint32_t INTF;	// off 0x00ac
	__IO uint32_t INTS;	// off 0x00b0
} PWM_TypeDef;
#define PWM_BASE 0x40050000
#define PWM ((PWM_TypeDef *) PWM_BASE)

typedef struct
{
	__IO uint32_t TIMEHW;	// off 0x0000
	__IO uint32_t TIMELW;	// off 0x0004
	__IO uint32_t TIMEHR;	// off 0x0008
	__IO uint32_t TIMELR;	// off 0x000c
	__IO uint32_t ALARM0;	// off 0x0010
	__IO uint32_t ALARM1;	// off 0x0014
	__IO uint32_t ALARM2;	// off 0x0018
	__IO uint32_t ALARM3;	// off 0x001c
	__IO uint32_t ARMED;	// off 0x0020
	__IO uint32_t TIMERAWH;	// off 0x0024
	__IO uint32_t TIMERAWL;	// off 0x0028
	__IO uint32_t DBGPAUSE;	// off 0x002c
	__IO uint32_t PAUSE;	// off 0x0030
	__IO uint32_t INTR;	// off 0x0034
	__IO uint32_t INTE;	// off 0x0038
	__IO uint32_t INTF;	// off 0x003c
	__IO uint32_t INTS;	// off 0x0040
} TIMER_TypeDef;
#define TIMER_BASE 0x40054000
#define TIMER ((TIMER_TypeDef *) TIMER_BASE)

typedef struct
{
	__IO uint32_t CTRL;	// off 0x0000
	__IO uint32_t LOAD;	// off 0x0004
	__IO uint32_t REASON;	// off 0x0008
	__IO uint32_t SCRATCH0;	// off 0x000c
	__IO uint32_t SCRATCH1;	// off 0x0010
	__IO uint32_t SCRATCH2;	// off 0x0014
	__IO uint32_t SCRATCH3;	// off 0x0018
	__IO uint32_t SCRATCH4;	// off 0x001c
	__IO uint32_t SCRATCH5;	// off 0x0020
	__IO uint32_t SCRATCH6;	// off 0x0024
	__IO uint32_t SCRATCH7;	// off 0x0028
	__IO uint32_t TICK;	// off 0x002c
} WATCHDOG_TypeDef;
#define WATCHDOG_BASE 0x40058000
#define WATCHDOG ((WATCHDOG_TypeDef *) WATCHDOG_BASE)

typedef struct
{
	__IO uint32_t CLKDIV_M1;	// off 0x0000
	__IO uint32_t SETUP_0;	// off 0x0004
	__IO uint32_t SETUP_1;	// off 0x0008
	__IO uint32_t CTRL;	// off 0x000c
	__IO uint32_t IRQ_SETUP_0;	// off 0x0010
	__IO uint32_t IRQ_SETUP_1;	// off 0x0014
	__IO uint32_t RTC_1;	// off 0x0018
	__IO uint32_t RTC_0;	// off 0x001c
	__IO uint32_t INTR;	// off 0x0020
	__IO uint32_t INTE;	// off 0x0024
	__IO uint32_t INTF;	// off 0x0028
	__IO uint32_t INTS;	// off 0x002c
} RTC_TypeDef;
#define RTC_BASE 0x4005c000
#define RTC ((RTC_TypeDef *) RTC_BASE)

typedef struct
{
	__IO uint32_t CTRL;	// off 0x0000
	__IO uint32_t FREQA;	// off 0x0004
	__IO uint32_t FREQB;	// off 0x0008
	__IO uint32_t DORMANT;	// off 0x000c
	__IO uint32_t DIV;	// off 0x0010
	__IO uint32_t PHASE;	// off 0x0014
	__IO uint32_t STATUS;	// off 0x0018
	__IO uint32_t RANDOMBIT;	// off 0x001c
	__IO uint32_t COUNT;	// off 0x0020
} ROSC_TypeDef;
#define ROSC_BASE 0x40060000
#define ROSC ((ROSC_TypeDef *) ROSC_BASE)

typedef struct
{
	__IO uint32_t VREG;	// off 0x0000
	__IO uint32_t BOD;	// off 0x0004
	__IO uint32_t CHIP_RESET;	// off 0x0008
} VREG_AND_CHIP_RESET_TypeDef;
#define VREG_AND_CHIP_RESET_BASE 0x40064000
#define VREG_AND_CHIP_RESET ((VREG_AND_CHIP_RESET_TypeDef *) VREG_AND_CHIP_RESET_BASE)

typedef struct
{
} TBMAN_TypeDef;
#define TBMAN_BASE 0x4006c000
#define TBMAN ((TBMAN_TypeDef *) TBMAN_BASE)

typedef struct
{
	__IO uint32_t CH0_READ_ADDR;	// off 0x0000
	__IO uint32_t CH0_WRITE_ADDR;	// off 0x0004
	__IO uint32_t CH0_TRANS_COUNT;	// off 0x0008
	__IO uint32_t CH0_CTRL_TRIG;	// off 0x000c
	__IO uint32_t CH0_AL1_CTRL;	// off 0x0010
	__IO uint32_t CH0_AL1_READ_ADDR;	// off 0x0014
	__IO uint32_t CH0_AL1_WRITE_ADDR;	// off 0x0018
	__IO uint32_t CH0_AL1_TRANS_COUNT_TRIG;	// off 0x001c
	__IO uint32_t CH0_AL2_CTRL;	// off 0x0020
	__IO uint32_t CH0_AL2_TRANS_COUNT;	// off 0x0024
	__IO uint32_t CH0_AL2_READ_ADDR;	// off 0x0028
	__IO uint32_t CH0_AL2_WRITE_ADDR_TRIG;	// off 0x002c
	__IO uint32_t CH0_AL3_CTRL;	// off 0x0030
	__IO uint32_t CH0_AL3_WRITE_ADDR;	// off 0x0034
	__IO uint32_t CH0_AL3_TRANS_COUNT;	// off 0x0038
	__IO uint32_t CH0_AL3_READ_ADDR_TRIG;	// off 0x003c
	__IO uint32_t CH1_READ_ADDR;	// off 0x0040
	__IO uint32_t CH1_WRITE_ADDR;	// off 0x0044
	__IO uint32_t CH1_TRANS_COUNT;	// off 0x0048
	__IO uint32_t CH1_CTRL_TRIG;	// off 0x004c
	__IO uint32_t CH1_AL1_CTRL;	// off 0x0050
	__IO uint32_t CH1_AL1_READ_ADDR;	// off 0x0054
	__IO uint32_t CH1_AL1_WRITE_ADDR;	// off 0x0058
	__IO uint32_t CH1_AL1_TRANS_COUNT_TRIG;	// off 0x005c
	__IO uint32_t CH1_AL2_CTRL;	// off 0x0060
	__IO uint32_t CH1_AL2_TRANS_COUNT;	// off 0x0064
	__IO uint32_t CH1_AL2_READ_ADDR;	// off 0x0068
	__IO uint32_t CH1_AL2_WRITE_ADDR_TRIG;	// off 0x006c
	__IO uint32_t CH1_AL3_CTRL;	// off 0x0070
	__IO uint32_t CH1_AL3_WRITE_ADDR;	// off 0x0074
	__IO uint32_t CH1_AL3_TRANS_COUNT;	// off 0x0078
	__IO uint32_t CH1_AL3_READ_ADDR_TRIG;	// off 0x007c
	__IO uint32_t CH2_READ_ADDR;	// off 0x0080
	__IO uint32_t CH2_WRITE_ADDR;	// off 0x0084
	__IO uint32_t CH2_TRANS_COUNT;	// off 0x0088
	__IO uint32_t CH2_CTRL_TRIG;	// off 0x008c
	__IO uint32_t CH2_AL1_CTRL;	// off 0x0090
	__IO uint32_t CH2_AL1_READ_ADDR;	// off 0x0094
	__IO uint32_t CH2_AL1_WRITE_ADDR;	// off 0x0098
	__IO uint32_t CH2_AL1_TRANS_COUNT_TRIG;	// off 0x009c
	__IO uint32_t CH2_AL2_CTRL;	// off 0x00a0
	__IO uint32_t CH2_AL2_TRANS_COUNT;	// off 0x00a4
	__IO uint32_t CH2_AL2_READ_ADDR;	// off 0x00a8
	__IO uint32_t CH2_AL2_WRITE_ADDR_TRIG;	// off 0x00ac
	__IO uint32_t CH2_AL3_CTRL;	// off 0x00b0
	__IO uint32_t CH2_AL3_WRITE_ADDR;	// off 0x00b4
	__IO uint32_t CH2_AL3_TRANS_COUNT;	// off 0x00b8
	__IO uint32_t CH2_AL3_READ_ADDR_TRIG;	// off 0x00bc
	__IO uint32_t CH3_READ_ADDR;	// off 0x00c0
	__IO uint32_t CH3_WRITE_ADDR;	// off 0x00c4
	__IO uint32_t CH3_TRANS_COUNT;	// off 0x00c8
	__IO uint32_t CH3_CTRL_TRIG;	// off 0x00cc
	__IO uint32_t CH3_AL1_CTRL;	// off 0x00d0
	__IO uint32_t CH3_AL1_READ_ADDR;	// off 0x00d4
	__IO uint32_t CH3_AL1_WRITE_ADDR;	// off 0x00d8
	__IO uint32_t CH3_AL1_TRANS_COUNT_TRIG;	// off 0x00dc
	__IO uint32_t CH3_AL2_CTRL;	// off 0x00e0
	__IO uint32_t CH3_AL2_TRANS_COUNT;	// off 0x00e4
	__IO uint32_t CH3_AL2_READ_ADDR;	// off 0x00e8
	__IO uint32_t CH3_AL2_WRITE_ADDR_TRIG;	// off 0x00ec
	__IO uint32_t CH3_AL3_CTRL;	// off 0x00f0
	__IO uint32_t CH3_AL3_WRITE_ADDR;	// off 0x00f4
	__IO uint32_t CH3_AL3_TRANS_COUNT;	// off 0x00f8
	__IO uint32_t CH3_AL3_READ_ADDR_TRIG;	// off 0x00fc
	__IO uint32_t CH4_READ_ADDR;	// off 0x0100
	__IO uint32_t CH4_WRITE_ADDR;	// off 0x0104
	__IO uint32_t CH4_TRANS_COUNT;	// off 0x0108
	__IO uint32_t CH4_CTRL_TRIG;	// off 0x010c
	__IO uint32_t CH4_AL1_CTRL;	// off 0x0110
	__IO uint32_t CH4_AL1_READ_ADDR;	// off 0x0114
	__IO uint32_t CH4_AL1_WRITE_ADDR;	// off 0x0118
	__IO uint32_t CH4_AL1_TRANS_COUNT_TRIG;	// off 0x011c
	__IO uint32_t CH4_AL2_CTRL;	// off 0x0120
	__IO uint32_t CH4_AL2_TRANS_COUNT;	// off 0x0124
	__IO uint32_t CH4_AL2_READ_ADDR;	// off 0x0128
	__IO uint32_t CH4_AL2_WRITE_ADDR_TRIG;	// off 0x012c
	__IO uint32_t CH4_AL3_CTRL;	// off 0x0130
	__IO uint32_t CH4_AL3_WRITE_ADDR;	// off 0x0134
	__IO uint32_t CH4_AL3_TRANS_COUNT;	// off 0x0138
	__IO uint32_t CH4_AL3_READ_ADDR_TRIG;	// off 0x013c
	__IO uint32_t CH5_READ_ADDR;	// off 0x0140
	__IO uint32_t CH5_WRITE_ADDR;	// off 0x0144
	__IO uint32_t CH5_TRANS_COUNT;	// off 0x0148
	__IO uint32_t CH5_CTRL_TRIG;	// off 0x014c
	__IO uint32_t CH5_AL1_CTRL;	// off 0x0150
	__IO uint32_t CH5_AL1_READ_ADDR;	// off 0x0154
	__IO uint32_t CH5_AL1_WRITE_ADDR;	// off 0x0158
	__IO uint32_t CH5_AL1_TRANS_COUNT_TRIG;	// off 0x015c
	__IO uint32_t CH5_AL2_CTRL;	// off 0x0160
	__IO uint32_t CH5_AL2_TRANS_COUNT;	// off 0x0164
	__IO uint32_t CH5_AL2_READ_ADDR;	// off 0x0168
	__IO uint32_t CH5_AL2_WRITE_ADDR_TRIG;	// off 0x016c
	__IO uint32_t CH5_AL3_CTRL;	// off 0x0170
	__IO uint32_t CH5_AL3_WRITE_ADDR;	// off 0x0174
	__IO uint32_t CH5_AL3_TRANS_COUNT;	// off 0x0178
	__IO uint32_t CH5_AL3_READ_ADDR_TRIG;	// off 0x017c
	__IO uint32_t CH6_READ_ADDR;	// off 0x0180
	__IO uint32_t CH6_WRITE_ADDR;	// off 0x0184
	__IO uint32_t CH6_TRANS_COUNT;	// off 0x0188
	__IO uint32_t CH6_CTRL_TRIG;	// off 0x018c
	__IO uint32_t CH6_AL1_CTRL;	// off 0x0190
	__IO uint32_t CH6_AL1_READ_ADDR;	// off 0x0194
	__IO uint32_t CH6_AL1_WRITE_ADDR;	// off 0x0198
	__IO uint32_t CH6_AL1_TRANS_COUNT_TRIG;	// off 0x019c
	__IO uint32_t CH6_AL2_CTRL;	// off 0x01a0
	__IO uint32_t CH6_AL2_TRANS_COUNT;	// off 0x01a4
	__IO uint32_t CH6_AL2_READ_ADDR;	// off 0x01a8
	__IO uint32_t CH6_AL2_WRITE_ADDR_TRIG;	// off 0x01ac
	__IO uint32_t CH6_AL3_CTRL;	// off 0x01b0
	__IO uint32_t CH6_AL3_WRITE_ADDR;	// off 0x01b4
	__IO uint32_t CH6_AL3_TRANS_COUNT;	// off 0x01b8
	__IO uint32_t CH6_AL3_READ_ADDR_TRIG;	// off 0x01bc
	__IO uint32_t CH7_READ_ADDR;	// off 0x01c0
	__IO uint32_t CH7_WRITE_ADDR;	// off 0x01c4
	__IO uint32_t CH7_TRANS_COUNT;	// off 0x01c8
	__IO uint32_t CH7_CTRL_TRIG;	// off 0x01cc
	__IO uint32_t CH7_AL1_CTRL;	// off 0x01d0
	__IO uint32_t CH7_AL1_READ_ADDR;	// off 0x01d4
	__IO uint32_t CH7_AL1_WRITE_ADDR;	// off 0x01d8
	__IO uint32_t CH7_AL1_TRANS_COUNT_TRIG;	// off 0x01dc
	__IO uint32_t CH7_AL2_CTRL;	// off 0x01e0
	__IO uint32_t CH7_AL2_TRANS_COUNT;	// off 0x01e4
	__IO uint32_t CH7_AL2_READ_ADDR;	// off 0x01e8
	__IO uint32_t CH7_AL2_WRITE_ADDR_TRIG;	// off 0x01ec
	__IO uint32_t CH7_AL3_CTRL;	// off 0x01f0
	__IO uint32_t CH7_AL3_WRITE_ADDR;	// off 0x01f4
	__IO uint32_t CH7_AL3_TRANS_COUNT;	// off 0x01f8
	__IO uint32_t CH7_AL3_READ_ADDR_TRIG;	// off 0x01fc
	__IO uint32_t CH8_READ_ADDR;	// off 0x0200
	__IO uint32_t CH8_WRITE_ADDR;	// off 0x0204
	__IO uint32_t CH8_TRANS_COUNT;	// off 0x0208
	__IO uint32_t CH8_CTRL_TRIG;	// off 0x020c
	__IO uint32_t CH8_AL1_CTRL;	// off 0x0210
	__IO uint32_t CH8_AL1_READ_ADDR;	// off 0x0214
	__IO uint32_t CH8_AL1_WRITE_ADDR;	// off 0x0218
	__IO uint32_t CH8_AL1_TRANS_COUNT_TRIG;	// off 0x021c
	__IO uint32_t CH8_AL2_CTRL;	// off 0x0220
	__IO uint32_t CH8_AL2_TRANS_COUNT;	// off 0x0224
	__IO uint32_t CH8_AL2_READ_ADDR;	// off 0x0228
	__IO uint32_t CH8_AL2_WRITE_ADDR_TRIG;	// off 0x022c
	__IO uint32_t CH8_AL3_CTRL;	// off 0x0230
	__IO uint32_t CH8_AL3_WRITE_ADDR;	// off 0x0234
	__IO uint32_t CH8_AL3_TRANS_COUNT;	// off 0x0238
	__IO uint32_t CH8_AL3_READ_ADDR_TRIG;	// off 0x023c
	__IO uint32_t CH9_READ_ADDR;	// off 0x0240
	__IO uint32_t CH9_WRITE_ADDR;	// off 0x0244
	__IO uint32_t CH9_TRANS_COUNT;	// off 0x0248
	__IO uint32_t CH9_CTRL_TRIG;	// off 0x024c
	__IO uint32_t CH9_AL1_CTRL;	// off 0x0250
	__IO uint32_t CH9_AL1_READ_ADDR;	// off 0x0254
	__IO uint32_t CH9_AL1_WRITE_ADDR;	// off 0x0258
	__IO uint32_t CH9_AL1_TRANS_COUNT_TRIG;	// off 0x025c
	__IO uint32_t CH9_AL2_CTRL;	// off 0x0260
	__IO uint32_t CH9_AL2_TRANS_COUNT;	// off 0x0264
	__IO uint32_t CH9_AL2_READ_ADDR;	// off 0x0268
	__IO uint32_t CH9_AL2_WRITE_ADDR_TRIG;	// off 0x026c
	__IO uint32_t CH9_AL3_CTRL;	// off 0x0270
	__IO uint32_t CH9_AL3_WRITE_ADDR;	// off 0x0274
	__IO uint32_t CH9_AL3_TRANS_COUNT;	// off 0x0278
	__IO uint32_t CH9_AL3_READ_ADDR_TRIG;	// off 0x027c
	__IO uint32_t CH10_READ_ADDR;	// off 0x0280
	__IO uint32_t CH10_WRITE_ADDR;	// off 0x0284
	__IO uint32_t CH10_TRANS_COUNT;	// off 0x0288
	__IO uint32_t CH10_CTRL_TRIG;	// off 0x028c
	__IO uint32_t CH10_AL1_CTRL;	// off 0x0290
	__IO uint32_t CH10_AL1_READ_ADDR;	// off 0x0294
	__IO uint32_t CH10_AL1_WRITE_ADDR;	// off 0x0298
	__IO uint32_t CH10_AL1_TRANS_COUNT_TRIG;	// off 0x029c
	__IO uint32_t CH10_AL2_CTRL;	// off 0x02a0
	__IO uint32_t CH10_AL2_TRANS_COUNT;	// off 0x02a4
	__IO uint32_t CH10_AL2_READ_ADDR;	// off 0x02a8
	__IO uint32_t CH10_AL2_WRITE_ADDR_TRIG;	// off 0x02ac
	__IO uint32_t CH10_AL3_CTRL;	// off 0x02b0
	__IO uint32_t CH10_AL3_WRITE_ADDR;	// off 0x02b4
	__IO uint32_t CH10_AL3_TRANS_COUNT;	// off 0x02b8
	__IO uint32_t CH10_AL3_READ_ADDR_TRIG;	// off 0x02bc
	__IO uint32_t CH11_READ_ADDR;	// off 0x02c0
	__IO uint32_t CH11_WRITE_ADDR;	// off 0x02c4
	__IO uint32_t CH11_TRANS_COUNT;	// off 0x02c8
	__IO uint32_t CH11_CTRL_TRIG;	// off 0x02cc
	__IO uint32_t CH11_AL1_CTRL;	// off 0x02d0
	__IO uint32_t CH11_AL1_READ_ADDR;	// off 0x02d4
	__IO uint32_t CH11_AL1_WRITE_ADDR;	// off 0x02d8
	__IO uint32_t CH11_AL1_TRANS_COUNT_TRIG;	// off 0x02dc
	__IO uint32_t CH11_AL2_CTRL;	// off 0x02e0
	__IO uint32_t CH11_AL2_TRANS_COUNT;	// off 0x02e4
	__IO uint32_t CH11_AL2_READ_ADDR;	// off 0x02e8
	__IO uint32_t CH11_AL2_WRITE_ADDR_TRIG;	// off 0x02ec
	__IO uint32_t CH11_AL3_CTRL;	// off 0x02f0
	__IO uint32_t CH11_AL3_WRITE_ADDR;	// off 0x02f4
	__IO uint32_t CH11_AL3_TRANS_COUNT;	// off 0x02f8
	__IO uint32_t CH11_AL3_READ_ADDR_TRIG;	// off 0x02fc
	__IO uint32_t _pad0[64]; 
	__IO uint32_t INTR;	// off 0x0400
	__IO uint32_t INTE0;	// off 0x0404
	__IO uint32_t INTF0;	// off 0x0408
	__IO uint32_t INTS0;	// off 0x040c
	__IO uint32_t _pad1; 
	__IO uint32_t INTE1;	// off 0x0414
	__IO uint32_t INTF1;	// off 0x0418
	__IO uint32_t INTS1;	// off 0x041c
	__IO uint32_t TIMER0;	// off 0x0420
	__IO uint32_t TIMER1;	// off 0x0424
	__IO uint32_t TIMER2;	// off 0x0428
	__IO uint32_t TIMER3;	// off 0x042c
	__IO uint32_t MULTI_CHAN_TRIGGER;	// off 0x0430
	__IO uint32_t SNIFF_CTRL;	// off 0x0434
	__IO uint32_t SNIFF_DATA;	// off 0x0438
	__IO uint32_t _pad2; 
	__IO uint32_t FIFO_LEVELS;	// off 0x0440
	__IO uint32_t CHAN_ABORT;	// off 0x0444
	__IO uint32_t N_CHANNELS;	// off 0x0448
	__IO uint32_t _pad3[237]; 
	__IO uint32_t CH0_DBG_CTDREQ;	// off 0x0800
	__IO uint32_t CH0_DBG_TCR;	// off 0x0804
	__IO uint32_t _pad4[14]; 
	__IO uint32_t CH1_DBG_CTDREQ;	// off 0x0840
	__IO uint32_t CH1_DBG_TCR;	// off 0x0844
	__IO uint32_t _pad5[14]; 
	__IO uint32_t CH2_DBG_CTDREQ;	// off 0x0880
	__IO uint32_t CH2_DBG_TCR;	// off 0x0884
	__IO uint32_t _pad6[14]; 
	__IO uint32_t CH3_DBG_CTDREQ;	// off 0x08c0
	__IO uint32_t CH3_DBG_TCR;	// off 0x08c4
	__IO uint32_t _pad7[14]; 
	__IO uint32_t CH4_DBG_CTDREQ;	// off 0x0900
	__IO uint32_t CH4_DBG_TCR;	// off 0x0904
	__IO uint32_t _pad8[14]; 
	__IO uint32_t CH5_DBG_CTDREQ;	// off 0x0940
	__IO uint32_t CH5_DBG_TCR;	// off 0x0944
	__IO uint32_t _pad9[14]; 
	__IO uint32_t CH6_DBG_CTDREQ;	// off 0x0980
	__IO uint32_t CH6_DBG_TCR;	// off 0x0984
	__IO uint32_t _pad10[14]; 
	__IO uint32_t CH7_DBG_CTDREQ;	// off 0x09c0
	__IO uint32_t CH7_DBG_TCR;	// off 0x09c4
	__IO uint32_t _pad11[14]; 
	__IO uint32_t CH8_DBG_CTDREQ;	// off 0x0a00
	__IO uint32_t CH8_DBG_TCR;	// off 0x0a04
	__IO uint32_t _pad12[14]; 
	__IO uint32_t CH9_DBG_CTDREQ;	// off 0x0a40
	__IO uint32_t CH9_DBG_TCR;	// off 0x0a44
	__IO uint32_t _pad13[14]; 
	__IO uint32_t CH10_DBG_CTDREQ;	// off 0x0a80
	__IO uint32_t CH10_DBG_TCR;	// off 0x0a84
	__IO uint32_t _pad14[14]; 
	__IO uint32_t CH11_DBG_CTDREQ;	// off 0x0ac0
	__IO uint32_t CH11_DBG_TCR;	// off 0x0ac4
} DMA_TypeDef;
#define DMA_BASE 0x50000000
#define DMA ((DMA_TypeDef *) DMA_BASE)

typedef struct
{
	__IO uint32_t SETUP_PACKET_LOW;	// off 0x0000
	__IO uint32_t SETUP_PACKET_HIGH;	// off 0x0004
	__IO uint32_t EP1_IN_CONTROL;	// off 0x0008
	__IO uint32_t EP1_OUT_CONTROL;	// off 0x000c
	__IO uint32_t EP2_IN_CONTROL;	// off 0x0010
	__IO uint32_t EP2_OUT_CONTROL;	// off 0x0014
	__IO uint32_t EP3_IN_CONTROL;	// off 0x0018
	__IO uint32_t EP3_OUT_CONTROL;	// off 0x001c
	__IO uint32_t EP4_IN_CONTROL;	// off 0x0020
	__IO uint32_t EP4_OUT_CONTROL;	// off 0x0024
	__IO uint32_t EP5_IN_CONTROL;	// off 0x0028
	__IO uint32_t EP5_OUT_CONTROL;	// off 0x002c
	__IO uint32_t EP6_IN_CONTROL;	// off 0x0030
	__IO uint32_t EP6_OUT_CONTROL;	// off 0x0034
	__IO uint32_t EP7_IN_CONTROL;	// off 0x0038
	__IO uint32_t EP7_OUT_CONTROL;	// off 0x003c
	__IO uint32_t EP8_IN_CONTROL;	// off 0x0040
	__IO uint32_t EP8_OUT_CONTROL;	// off 0x0044
	__IO uint32_t EP9_IN_CONTROL;	// off 0x0048
	__IO uint32_t EP9_OUT_CONTROL;	// off 0x004c
	__IO uint32_t EP10_IN_CONTROL;	// off 0x0050
	__IO uint32_t EP10_OUT_CONTROL;	// off 0x0054
	__IO uint32_t EP11_IN_CONTROL;	// off 0x0058
	__IO uint32_t EP11_OUT_CONTROL;	// off 0x005c
	__IO uint32_t EP12_IN_CONTROL;	// off 0x0060
	__IO uint32_t EP12_OUT_CONTROL;	// off 0x0064
	__IO uint32_t EP13_IN_CONTROL;	// off 0x0068
	__IO uint32_t EP13_OUT_CONTROL;	// off 0x006c
	__IO uint32_t EP14_IN_CONTROL;	// off 0x0070
	__IO uint32_t EP14_OUT_CONTROL;	// off 0x0074
	__IO uint32_t EP15_IN_CONTROL;	// off 0x0078
	__IO uint32_t EP15_OUT_CONTROL;	// off 0x007c
	__IO uint32_t EP0_IN_BUFFER_CONTROL;	// off 0x0080
	__IO uint32_t EP0_OUT_BUFFER_CONTROL;	// off 0x0084
	__IO uint32_t EP1_IN_BUFFER_CONTROL;	// off 0x0088
	__IO uint32_t EP1_OUT_BUFFER_CONTROL;	// off 0x008c
	__IO uint32_t EP2_IN_BUFFER_CONTROL;	// off 0x0090
	__IO uint32_t EP2_OUT_BUFFER_CONTROL;	// off 0x0094
	__IO uint32_t EP3_IN_BUFFER_CONTROL;	// off 0x0098
	__IO uint32_t EP3_OUT_BUFFER_CONTROL;	// off 0x009c
	__IO uint32_t EP4_IN_BUFFER_CONTROL;	// off 0x00a0
	__IO uint32_t EP4_OUT_BUFFER_CONTROL;	// off 0x00a4
	__IO uint32_t EP5_IN_BUFFER_CONTROL;	// off 0x00a8
	__IO uint32_t EP5_OUT_BUFFER_CONTROL;	// off 0x00ac
	__IO uint32_t EP6_IN_BUFFER_CONTROL;	// off 0x00b0
	__IO uint32_t EP6_OUT_BUFFER_CONTROL;	// off 0x00b4
	__IO uint32_t EP7_IN_BUFFER_CONTROL;	// off 0x00b8
	__IO uint32_t EP7_OUT_BUFFER_CONTROL;	// off 0x00bc
	__IO uint32_t EP8_IN_BUFFER_CONTROL;	// off 0x00c0
	__IO uint32_t EP8_OUT_BUFFER_CONTROL;	// off 0x00c4
	__IO uint32_t EP9_IN_BUFFER_CONTROL;	// off 0x00c8
	__IO uint32_t EP9_OUT_BUFFER_CONTROL;	// off 0x00cc
	__IO uint32_t EP10_IN_BUFFER_CONTROL;	// off 0x00d0
	__IO uint32_t EP10_OUT_BUFFER_CONTROL;	// off 0x00d4
	__IO uint32_t EP11_IN_BUFFER_CONTROL;	// off 0x00d8
	__IO uint32_t EP11_OUT_BUFFER_CONTROL;	// off 0x00dc
	__IO uint32_t EP12_IN_BUFFER_CONTROL;	// off 0x00e0
	__IO uint32_t EP12_OUT_BUFFER_CONTROL;	// off 0x00e4
	__IO uint32_t EP13_IN_BUFFER_CONTROL;	// off 0x00e8
	__IO uint32_t EP13_OUT_BUFFER_CONTROL;	// off 0x00ec
	__IO uint32_t EP14_IN_BUFFER_CONTROL;	// off 0x00f0
	__IO uint32_t EP14_OUT_BUFFER_CONTROL;	// off 0x00f4
	__IO uint32_t EP15_IN_BUFFER_CONTROL;	// off 0x00f8
	__IO uint32_t EP15_OUT_BUFFER_CONTROL;	// off 0x00fc
} USBCTRL_DPRAM_TypeDef;
#define USBCTRL_DPRAM_BASE 0x50100000
#define USBCTRL_DPRAM ((USBCTRL_DPRAM_TypeDef *) USBCTRL_DPRAM_BASE)

typedef struct
{
	__IO uint32_t ADDR_ENDP;	// off 0x0000
	__IO uint32_t ADDR_ENDP1;	// off 0x0004
	__IO uint32_t ADDR_ENDP2;	// off 0x0008
	__IO uint32_t ADDR_ENDP3;	// off 0x000c
	__IO uint32_t ADDR_ENDP4;	// off 0x0010
	__IO uint32_t ADDR_ENDP5;	// off 0x0014
	__IO uint32_t ADDR_ENDP6;	// off 0x0018
	__IO uint32_t ADDR_ENDP7;	// off 0x001c
	__IO uint32_t ADDR_ENDP8;	// off 0x0020
	__IO uint32_t ADDR_ENDP9;	// off 0x0024
	__IO uint32_t ADDR_ENDP10;	// off 0x0028
	__IO uint32_t ADDR_ENDP11;	// off 0x002c
	__IO uint32_t ADDR_ENDP12;	// off 0x0030
	__IO uint32_t ADDR_ENDP13;	// off 0x0034
	__IO uint32_t ADDR_ENDP14;	// off 0x0038
	__IO uint32_t ADDR_ENDP15;	// off 0x003c
	__IO uint32_t MAIN_CTRL;	// off 0x0040
	__IO uint32_t SOF_WR;	// off 0x0044
	__IO uint32_t SOF_RD;	// off 0x0048
	__IO uint32_t SIE_CTRL;	// off 0x004c
	__IO uint32_t SIE_STATUS;	// off 0x0050
	__IO uint32_t INT_EP_CTRL;	// off 0x0054
	__IO uint32_t BUFF_STATUS;	// off 0x0058
	__IO uint32_t BUFF_CPU_SHOULD_HANDLE;	// off 0x005c
	__IO uint32_t EP_ABORT;	// off 0x0060
	__IO uint32_t EP_ABORT_DONE;	// off 0x0064
	__IO uint32_t EP_STALL_ARM;	// off 0x0068
	__IO uint32_t NAK_POLL;	// off 0x006c
	__IO uint32_t EP_STATUS_STALL_NAK;	// off 0x0070
	__IO uint32_t USB_MUXING;	// off 0x0074
	__IO uint32_t USB_PWR;	// off 0x0078
	__IO uint32_t USBPHY_DIRECT;	// off 0x007c
	__IO uint32_t USBPHY_DIRECT_OVERRIDE;	// off 0x0080
	__IO uint32_t USBPHY_TRIM;	// off 0x0084
	__IO uint32_t _pad0; 
	__IO uint32_t INTR;	// off 0x008c
	__IO uint32_t INTE;	// off 0x0090
	__IO uint32_t INTF;	// off 0x0094
	__IO uint32_t INTS;	// off 0x0098
} USBCTRL_REGS_TypeDef;
#define USBCTRL_REGS_BASE 0x50110000
#define USBCTRL_REGS ((USBCTRL_REGS_TypeDef *) USBCTRL_REGS_BASE)

typedef struct
{
	__IO uint32_t CTRL;	// off 0x0000
	__IO uint32_t FSTAT;	// off 0x0004
	__IO uint32_t FDEBUG;	// off 0x0008
	__IO uint32_t FLEVEL;	// off 0x000c
	__IO uint32_t TXF0;	// off 0x0010
	__IO uint32_t TXF1;	// off 0x0014
	__IO uint32_t TXF2;	// off 0x0018
	__IO uint32_t TXF3;	// off 0x001c
	__IO uint32_t RXF0;	// off 0x0020
	__IO uint32_t RXF1;	// off 0x0024
	__IO uint32_t RXF2;	// off 0x0028
	__IO uint32_t RXF3;	// off 0x002c
	__IO uint32_t IRQ;	// off 0x0030
	__IO uint32_t IRQ_FORCE;	// off 0x0034
	__IO uint32_t INPUT_SYNC_BYPASS;	// off 0x0038
	__IO uint32_t DBG_PADOUT;	// off 0x003c
	__IO uint32_t DBG_PADOE;	// off 0x0040
	__IO uint32_t DBG_CFGINFO;	// off 0x0044
	__IO uint32_t INSTR_MEM0;	// off 0x0048
	__IO uint32_t INSTR_MEM1;	// off 0x004c
	__IO uint32_t INSTR_MEM2;	// off 0x0050
	__IO uint32_t INSTR_MEM3;	// off 0x0054
	__IO uint32_t INSTR_MEM4;	// off 0x0058
	__IO uint32_t INSTR_MEM5;	// off 0x005c
	__IO uint32_t INSTR_MEM6;	// off 0x0060
	__IO uint32_t INSTR_MEM7;	// off 0x0064
	__IO uint32_t INSTR_MEM8;	// off 0x0068
	__IO uint32_t INSTR_MEM9;	// off 0x006c
	__IO uint32_t INSTR_MEM10;	// off 0x0070
	__IO uint32_t INSTR_MEM11;	// off 0x0074
	__IO uint32_t INSTR_MEM12;	// off 0x0078
	__IO uint32_t INSTR_MEM13;	// off 0x007c
	__IO uint32_t INSTR_MEM14;	// off 0x0080
	__IO uint32_t INSTR_MEM15;	// off 0x0084
	__IO uint32_t INSTR_MEM16;	// off 0x0088
	__IO uint32_t INSTR_MEM17;	// off 0x008c
	__IO uint32_t INSTR_MEM18;	// off 0x0090
	__IO uint32_t INSTR_MEM19;	// off 0x0094
	__IO uint32_t INSTR_MEM20;	// off 0x0098
	__IO uint32_t INSTR_MEM21;	// off 0x009c
	__IO uint32_t INSTR_MEM22;	// off 0x00a0
	__IO uint32_t INSTR_MEM23;	// off 0x00a4
	__IO uint32_t INSTR_MEM24;	// off 0x00a8
	__IO uint32_t INSTR_MEM25;	// off 0x00ac
	__IO uint32_t INSTR_MEM26;	// off 0x00b0
	__IO uint32_t INSTR_MEM27;	// off 0x00b4
	__IO uint32_t INSTR_MEM28;	// off 0x00b8
	__IO uint32_t INSTR_MEM29;	// off 0x00bc
	__IO uint32_t INSTR_MEM30;	// off 0x00c0
	__IO uint32_t INSTR_MEM31;	// off 0x00c4
	__IO uint32_t SM0_CLKDIV;	// off 0x00c8
	__IO uint32_t SM0_EXECCTRL;	// off 0x00cc
	__IO uint32_t SM0_SHIFTCTRL;	// off 0x00d0
	__IO uint32_t SM0_ADDR;	// off 0x00d4
	__IO uint32_t SM0_INSTR;	// off 0x00d8
	__IO uint32_t SM0_PINCTRL;	// off 0x00dc
	__IO uint32_t SM1_CLKDIV;	// off 0x00e0
	__IO uint32_t SM1_EXECCTRL;	// off 0x00e4
	__IO uint32_t SM1_SHIFTCTRL;	// off 0x00e8
	__IO uint32_t SM1_ADDR;	// off 0x00ec
	__IO uint32_t SM1_INSTR;	// off 0x00f0
	__IO uint32_t SM1_PINCTRL;	// off 0x00f4
	__IO uint32_t SM2_CLKDIV;	// off 0x00f8
	__IO uint32_t SM2_EXECCTRL;	// off 0x00fc
	__IO uint32_t SM2_SHIFTCTRL;	// off 0x0100
	__IO uint32_t SM2_ADDR;	// off 0x0104
	__IO uint32_t SM2_INSTR;	// off 0x0108
	__IO uint32_t SM2_PINCTRL;	// off 0x010c
	__IO uint32_t SM3_CLKDIV;	// off 0x0110
	__IO uint32_t SM3_EXECCTRL;	// off 0x0114
	__IO uint32_t SM3_SHIFTCTRL;	// off 0x0118
	__IO uint32_t SM3_ADDR;	// off 0x011c
	__IO uint32_t SM3_INSTR;	// off 0x0120
	__IO uint32_t SM3_PINCTRL;	// off 0x0124
	__IO uint32_t INTR;	// off 0x0128
	__IO uint32_t IRQ0_INTE;	// off 0x012c
	__IO uint32_t IRQ0_INTF;	// off 0x0130
	__IO uint32_t IRQ0_INTS;	// off 0x0134
	__IO uint32_t IRQ1_INTE;	// off 0x0138
	__IO uint32_t IRQ1_INTF;	// off 0x013c
	__IO uint32_t IRQ1_INTS;	// off 0x0140
} PIO_TypeDef;
#define PIO0_BASE 0x50200000
#define PIO0 ((PIO_TypeDef *) PIO0_BASE)

#define PIO1_BASE 0x50300000
#define PIO1 ((PIO_TypeDef *) PIO1_BASE)

typedef struct
{
	__IO uint32_t CPUID;	// off 0x0000
	__IO uint32_t GPIO_IN;	// off 0x0004
	__IO uint32_t GPIO_HI_IN;	// off 0x0008
	__IO uint32_t _pad0; 
	__IO uint32_t GPIO_OUT;	// off 0x0010
	__IO uint32_t GPIO_OUT_SET;	// off 0x0014
	__IO uint32_t GPIO_OUT_CLR;	// off 0x0018
	__IO uint32_t GPIO_OUT_XOR;	// off 0x001c
	__IO uint32_t GPIO_OE;	// off 0x0020
	__IO uint32_t GPIO_OE_SET;	// off 0x0024
	__IO uint32_t GPIO_OE_CLR;	// off 0x0028
	__IO uint32_t GPIO_OE_XOR;	// off 0x002c
	__IO uint32_t GPIO_HI_OUT;	// off 0x0030
	__IO uint32_t GPIO_HI_OUT_SET;	// off 0x0034
	__IO uint32_t GPIO_HI_OUT_CLR;	// off 0x0038
	__IO uint32_t GPIO_HI_OUT_XOR;	// off 0x003c
	__IO uint32_t GPIO_HI_OE;	// off 0x0040
	__IO uint32_t GPIO_HI_OE_SET;	// off 0x0044
	__IO uint32_t GPIO_HI_OE_CLR;	// off 0x0048
	__IO uint32_t GPIO_HI_OE_XOR;	// off 0x004c
	__IO uint32_t FIFO_ST;	// off 0x0050
	__IO uint32_t FIFO_WR;	// off 0x0054
	__IO uint32_t FIFO_RD;	// off 0x0058
	__IO uint32_t SPINLOCK_ST;	// off 0x005c
	__IO uint32_t DIV_UDIVIDEND;	// off 0x0060
	__IO uint32_t DIV_UDIVISOR;	// off 0x0064
	__IO uint32_t DIV_SDIVIDEND;	// off 0x0068
	__IO uint32_t DIV_SDIVISOR;	// off 0x006c
	__IO uint32_t DIV_QUOTIENT;	// off 0x0070
	__IO uint32_t DIV_REMAINDER;	// off 0x0074
	__IO uint32_t DIV_CSR;	// off 0x0078
	__IO uint32_t _pad1; 
	__IO uint32_t INTERP0_ACCUM0;	// off 0x0080
	__IO uint32_t INTERP0_ACCUM1;	// off 0x0084
	__IO uint32_t INTERP0_BASE0;	// off 0x0088
	__IO uint32_t INTERP0_BASE1;	// off 0x008c
	__IO uint32_t INTERP0_BASE2;	// off 0x0090
	__IO uint32_t INTERP0_POP_LANE0;	// off 0x0094
	__IO uint32_t INTERP0_POP_LANE1;	// off 0x0098
	__IO uint32_t INTERP0_POP_FULL;	// off 0x009c
	__IO uint32_t INTERP0_PEEK_LANE0;	// off 0x00a0
	__IO uint32_t INTERP0_PEEK_LANE1;	// off 0x00a4
	__IO uint32_t INTERP0_PEEK_FULL;	// off 0x00a8
	__IO uint32_t INTERP0_CTRL_LANE0;	// off 0x00ac
	__IO uint32_t INTERP0_CTRL_LANE1;	// off 0x00b0
	__IO uint32_t INTERP0_ACCUM0_ADD;	// off 0x00b4
	__IO uint32_t INTERP0_ACCUM1_ADD;	// off 0x00b8
	__IO uint32_t INTERP0_BASE_1AND0;	// off 0x00bc
	__IO uint32_t INTERP1_ACCUM0;	// off 0x00c0
	__IO uint32_t INTERP1_ACCUM1;	// off 0x00c4
	__IO uint32_t INTERP1_BASE0;	// off 0x00c8
	__IO uint32_t INTERP1_BASE1;	// off 0x00cc
	__IO uint32_t INTERP1_BASE2;	// off 0x00d0
	__IO uint32_t INTERP1_POP_LANE0;	// off 0x00d4
	__IO uint32_t INTERP1_POP_LANE1;	// off 0x00d8
	__IO uint32_t INTERP1_POP_FULL;	// off 0x00dc
	__IO uint32_t INTERP1_PEEK_LANE0;	// off 0x00e0
	__IO uint32_t INTERP1_PEEK_LANE1;	// off 0x00e4
	__IO uint32_t INTERP1_PEEK_FULL;	// off 0x00e8
	__IO uint32_t INTERP1_CTRL_LANE0;	// off 0x00ec
	__IO uint32_t INTERP1_CTRL_LANE1;	// off 0x00f0
	__IO uint32_t INTERP1_ACCUM0_ADD;	// off 0x00f4
	__IO uint32_t INTERP1_ACCUM1_ADD;	// off 0x00f8
	__IO uint32_t INTERP1_BASE_1AND0;	// off 0x00fc
	__IO uint32_t SPINLOCK0;	// off 0x0100
	__IO uint32_t SPINLOCK1;	// off 0x0104
	__IO uint32_t SPINLOCK2;	// off 0x0108
	__IO uint32_t SPINLOCK3;	// off 0x010c
	__IO uint32_t SPINLOCK4;	// off 0x0110
	__IO uint32_t SPINLOCK5;	// off 0x0114
	__IO uint32_t SPINLOCK6;	// off 0x0118
	__IO uint32_t SPINLOCK7;	// off 0x011c
	__IO uint32_t SPINLOCK8;	// off 0x0120
	__IO uint32_t SPINLOCK9;	// off 0x0124
	__IO uint32_t SPINLOCK10;	// off 0x0128
	__IO uint32_t SPINLOCK11;	// off 0x012c
	__IO uint32_t SPINLOCK12;	// off 0x0130
	__IO uint32_t SPINLOCK13;	// off 0x0134
	__IO uint32_t SPINLOCK14;	// off 0x0138
	__IO uint32_t SPINLOCK15;	// off 0x013c
	__IO uint32_t SPINLOCK16;	// off 0x0140
	__IO uint32_t SPINLOCK17;	// off 0x0144
	__IO uint32_t SPINLOCK18;	// off 0x0148
	__IO uint32_t SPINLOCK19;	// off 0x014c
	__IO uint32_t SPINLOCK20;	// off 0x0150
	__IO uint32_t SPINLOCK21;	// off 0x0154
	__IO uint32_t SPINLOCK22;	// off 0x0158
	__IO uint32_t SPINLOCK23;	// off 0x015c
	__IO uint32_t SPINLOCK24;	// off 0x0160
	__IO uint32_t SPINLOCK25;	// off 0x0164
	__IO uint32_t SPINLOCK26;	// off 0x0168
	__IO uint32_t SPINLOCK27;	// off 0x016c
	__IO uint32_t SPINLOCK28;	// off 0x0170
	__IO uint32_t SPINLOCK29;	// off 0x0174
	__IO uint32_t SPINLOCK30;	// off 0x0178
	__IO uint32_t SPINLOCK31;	// off 0x017c
} SIO_TypeDef;
#define SIO_BASE 0xd0000000
#define SIO ((SIO_TypeDef *) SIO_BASE)

typedef struct
{
	__IO uint32_t _pad0[14340]; 
	__IO uint32_t SYST_CSR;	// off 0xe010
	__IO uint32_t SYST_RVR;	// off 0xe014
	__IO uint32_t SYST_CVR;	// off 0xe018
	__IO uint32_t SYST_CALIB;	// off 0xe01c
	__IO uint32_t _pad1[56]; 
	__IO uint32_t NVIC_ISER;	// off 0xe100
	__IO uint32_t _pad2[31]; 
	__IO uint32_t NVIC_ICER;	// off 0xe180
	__IO uint32_t _pad3[31]; 
	__IO uint32_t NVIC_ISPR;	// off 0xe200
	__IO uint32_t _pad4[31]; 
	__IO uint32_t NVIC_ICPR;	// off 0xe280
	__IO uint32_t _pad5[95]; 
	__IO uint32_t NVIC_IPR0;	// off 0xe400
	__IO uint32_t NVIC_IPR1;	// off 0xe404
	__IO uint32_t NVIC_IPR2;	// off 0xe408
	__IO uint32_t NVIC_IPR3;	// off 0xe40c
	__IO uint32_t NVIC_IPR4;	// off 0xe410
	__IO uint32_t NVIC_IPR5;	// off 0xe414
	__IO uint32_t NVIC_IPR6;	// off 0xe418
	__IO uint32_t NVIC_IPR7;	// off 0xe41c
	__IO uint32_t _pad6[568]; 
	__IO uint32_t CPUID;	// off 0xed00
	__IO uint32_t ICSR;	// off 0xed04
	__IO uint32_t VTOR;	// off 0xed08
	__IO uint32_t AIRCR;	// off 0xed0c
	__IO uint32_t SCR;	// off 0xed10
	__IO uint32_t CCR;	// off 0xed14
	__IO uint32_t _pad7; 
	__IO uint32_t SHPR2;	// off 0xed1c
	__IO uint32_t SHPR3;	// off 0xed20
	__IO uint32_t SHCSR;	// off 0xed24
	__IO uint32_t _pad8[26]; 
	__IO uint32_t MPU_TYPE;	// off 0xed90
	__IO uint32_t MPU_CTRL;	// off 0xed94
	__IO uint32_t MPU_RNR;	// off 0xed98
	__IO uint32_t MPU_RBAR;	// off 0xed9c
	__IO uint32_t MPU_RASR;	// off 0xeda0
} PPB_TypeDef;
#define PPB_BASE 0xe0000000
#define PPB ((PPB_TypeDef *) PPB_BASE)
